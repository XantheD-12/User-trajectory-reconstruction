{"remainingRequest":"E:\\vue\\JSAPI_Vue2\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\vue\\JSAPI_Vue2\\src\\views\\MapContainer.vue?vue&type=style&index=0&id=56f9353f&scoped=true&lang=css&","dependencies":[{"path":"E:\\vue\\JSAPI_Vue2\\src\\views\\MapContainer.vue","mtime":1651725402550},{"path":"E:\\vue\\JSAPI_Vue2\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\vue\\JSAPI_Vue2\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"E:\\vue\\JSAPI_Vue2\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"E:\\vue\\JSAPI_Vue2\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\vue\\JSAPI_Vue2\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5ob21lX2RpdiB7CiAgcGFkZGluZzogMHB4OwogIG1hcmdpbjogMHB4OwogIHdpZHRoOiAxMDAlOwogIGhlaWdodDogMTAwJTsKICAvKiBwb3NpdGlvbjogcmVsYXRpdmU7ICovCn0KI2NvbnRhaW5lciB7CiAgLyogcGFkZGluZzogMjBweDsgKi8KICBtYXJnaW46IDEwcHg7CiAgd2lkdGg6IDEwMCUgLSAyMHB4OwogIGhlaWdodDogMTAwJTsKICAvKiBwb3NpdGlvbjogYWJzb2x1dGU7ICovCn0KLm1hcF90aXRsZSB7CiAgLyogcG9zaXRpb246IGFic29sdXRlOwogIHotaW5kZXg6IDE7ICovCiAgd2lkdGg6IDEwMCU7CiAgaGVpZ2h0OiA1MHB4OwogIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMjcsIDI1LCAyNywgMC44ODQpOwp9CmgzIHsKICAvKiBwb3NpdGlvbjogYWJzb2x1dGU7ICovCiAgLyogbGVmdDogMTBweDsgKi8KICAvKiB6LWluZGV4OiAyOyAqLwogIGNvbG9yOiB3aGl0ZTsKfQpidG5fYm94IHsKICBtYXJnaW46IDEwcHg7CiAgcGFkZGluZzogMTBweDsKfQo="},{"version":3,"sources":["MapContainer.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"MapContainer.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div class=\"home_div\">\n    <div class=\"map_title\">\n      <h3>示例</h3>\n    </div>\n    <div class=\"btn_box\">\n      <!-- <el-button type=\"primary\" size=\"small\" round>主要按钮</el-button> -->\n      <el-button type=\"primary\" size=\"small\" round @click=\"removeMarkers\"\n        >Remove</el-button\n      >\n      <el-button type=\"success\" size=\"small\" round @click=\"addMarkers('Origin')\"\n        >Origin</el-button\n      >\n      <el-button type=\"info\" size=\"small\" round @click=\"addMarkers('Expected')\"\n        >Expected</el-button\n      >\n      <el-button type=\"warning\" size=\"small\" round @click=\"addMarkers('Result')\"\n        >Result</el-button\n      >\n      <!-- <el-button type=\"danger\" size=\"small\" round @click=\"drive\"\n        >画图</el-button\n      > -->\n      <el-button type=\"danger\" size=\"small\" round @click=\"getDispatchDetail\"\n        >绘制</el-button\n      >\n      <!-- <button @click=\"test\">测试</button> -->\n    </div>\n    <div id=\"container\"></div>\n    <div id=\"panel\"></div>\n  </div>\n</template>\n\n<script>\nimport AMapLoader from \"@amap/amap-jsapi-loader\";\nexport default {\n  name: \"Mapview\",\n  data() {\n    return {\n      map: null,\n      driving: null,\n      routeLineList: [],\n      icon: \"http://webapi.amap.com/theme/v1.3/markers/n/mark_r.png\",\n      date: \"\",\n      time_id: \"\",\n      user_id: [],\n      origin: [],\n      expected: [],\n      result: [],\n      center: [116.407387, 39.904179],\n      points: [[116.407387, 39.904179]],\n      markList: [],\n    };\n  },\n  created() {},\n  mounted() {\n    this.init();\n  },\n  methods: {\n    // 经纬度驾车路线规划：https://lbs.amap.com/demo/jsapi-v2/example/driving-route/plan-route-according-to-lnglat\n    // 路径规划：https://lbs.amap.com/api/webservice/guide/api/direction#driving\n    drive() {\n      console.log(this.result);\n      console.log(this.result.length);\n      console.log(\n        this.result.filter((data) => {\n          return data != \"\";\n        })\n      );\n\n      // var map = this.map;\n      // map.plugin(\"AMap.DragRoute\", function () {\n      //   // path 是驾车导航的起、途径和终点，最多支持16个途经点\n      //   var path = [];\n\n      //   path.push([116.303843, 39.983412]);\n      //   path.push([116.321354, 39.896436]);\n      //   path.push([116.407012, 39.992093]);\n\n      //   var route = new AMap.DragRoute(map, path, AMap.DrivingPolicy.LEAST_FEE);\n      //   // 查询导航路径并开启拖拽导航\n      //   route.search();\n      // });\n      // console.log(this.map);\n      var map = this.map;\n      AMap.plugin(\"AMap.Driving\", function () {\n        var driving = new AMap.Driving({\n          // 驾车路线规划策略，AMap.DrivingPolicy.LEAST_TIME是最快捷模式\n          policy: AMap.DrivingPolicy.LEAST_TIME,\n          // map 指定将路线规划方案绘制到对应的AMap.Map对象上\n          map: map,\n          // panel 指定将结构化的路线详情数据显示的对应的DOM上，传入值需是DOM的ID\n          panel: \"panel\",\n        });\n\n        var startLngLat = [116.379028, 39.865042];\n        var endLngLat = [116.427281, 39.903719];\n\n        driving.search(startLngLat, endLngLat, function (status, result) {\n          // 未出错时，result即是对应的路线规划方案\n          console.log(status, result);\n        });\n      });\n    },\n    // 信息窗体：https://blog.csdn.net/m0_37355951/article/details/77527686\n\n    // 动画：https://blog.csdn.net/weixin_45559135/article/details/110001139?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-1.pc_relevant_default&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-1.pc_relevant_default&utm_relevant_index=2\n    // 一些参考：https://blog.csdn.net/qq_44861015/article/details/122726609?spm=1001.2101.3001.6650.4&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-4.pc_relevant_default&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-4.pc_relevant_default&utm_relevant_index=9\n    // https://blog.csdn.net/annaihanyou65423/article/details/101672953\n    // https://blog.csdn.net/weixin_41618917/article/details/117258242?spm=1001.2101.3001.6650.4&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-4.pc_relevant_antiscanv2&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-4.pc_relevant_antiscanv2&utm_relevant_index=5\n    // vue高德多条轨迹导航+带途径节点标注+各路线颜色区别：https://blog.csdn.net/qq_29101609/article/details/103597842?spm=1001.2101.3001.6650.2&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-2.pc_relevant_paycolumn_v3&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-2.pc_relevant_paycolumn_v3&utm_relevant_index=3\n    // vue高德单条(可批量)路线规划+单条(可批量)路线带途径节点marker+单条(可批量)路线分段渲染各颜色：https://blog.csdn.net/qq_29101609/article/details/106237837?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-0.pc_relevant_default&spm=1001.2101.3001.4242.1&utm_relevant_index=3\n    getDispatchDetail() {\n      // 清除老的行经路线\n      // if (this.driving) {\n      //   this.driving.clear();\n      //   this.map.remove(this.routeLineList); // 因为我在创建的时候重置了线的样式， 也要删除routeLineList\n      // }\n      // this.loadingDispatchList = true;\n      const lineColor = \"rgba(0,0,205,0.8)\";\n      // const lineColor =\n      //   \"rgba(\" +\n      //   255 +\n      //   \",\" +\n      //   Math.floor(Math.random() * 255) +\n      //   \",\" +\n      //   Math.floor(Math.random() * 255) +\n      //   \",\" +\n      //   1 +\n      //   \")\"; // 随机线的颜色\n      // if (code === 1) {\n      //   const plan = data.plan || {};\n      //   plan.orderSets = data.orderSets || [];\n      // if (plan.waybill_order_list.length > 1) {\n      // 画 行经路线\n      this.driving = new AMap.Driving({\n        // 驾车路线规划策略，AMap.DrivingPolicy.LEAST_TIME是最快捷模式,还有其他几种方式见Api文档\n        policy: AMap.DrivingPolicy.LEAST_TIME,\n      });\n      var data = this.result.filter((data) => {\n        return data != \"\";\n      });\n      var map = this.map;\n      for (let i = 0; i < data.length - 1; i++) {\n        console.log(data[i][0], data[i][1], data[i + 1][0], data[i + 1][1]);\n\n        this.drawMapLine(\n          data[i][0],\n          data[i][1],\n          data[i + 1][0],\n          data[i + 1][1],\n          map,\n          lineColor\n        );\n      }\n      // this.loadingDispatchList = false;\n    },\n    // start_x:起点的横坐标；\n    // start_y：起点的纵坐标；\n    // end_x:终点的横坐标；\n    // end_y:终点的纵坐标；\n    // map:实例化map（this.map）\n    // color:随机线的颜色\n    // 绘制路径\n    drawMapLine(start_x, start_y, end_x, end_y, map, color) {\n      map.plugin(\"AMap.Driving\", () => {\n        var start_xy = new AMap.LngLat(start_x, start_y);\n        var end_xy = new AMap.LngLat(end_x, end_y);\n        // 根据起终点经纬度规划驾车导航 路线\n        this.driving.search(start_xy, end_xy, (status, result) => {\n          console.log(status, result);\n          if (status === \"complete\") {\n            if (result.routes && result.routes.length) {\n              // 绘制第一条路线，也可以按需求绘制其它几条路线\n              var path = this.parseRouteToPath(result.routes[0]);\n              var routeLine = new AMap.Polyline({\n                path: path,\n                isOutline: true,\n                outlineColor: \"#ffeeee\",\n                borderWeight: 2,\n                strokeWeight: 3,\n                strokeColor: color,\n                lineJoin: \"round\",\n              });\n              routeLine.setMap(map);\n              // 调整视野达到最佳显示区域\n              // map.setFitView([startMarker, endMarker, routeLine])\n              this.routeLineList.push(routeLine);\n              console.log(\"绘制驾车路线完成\");\n            }\n          } else {\n            console.log(\"获取驾车数据失败：\" + result);\n          }\n        });\n      });\n    },\n    // 计算各个拐点位置\n    parseRouteToPath(route) {\n      var path = [];\n      for (var i = 0, l = route.steps.length; i < l; i++) {\n        var step = route.steps[i];\n        for (var j = 0, n = step.path.length; j < n; j++) {\n          path.push(step.path[j]);\n        }\n      }\n      return path;\n    },\n\n    test() {\n      console.log(\"test\");\n      this.loadTrace();\n    },\n    loadTrace() {\n      var data = this.expected.filter((data) => {\n        return data != \"\";\n      });\n      console.log(data);\n      this.points = data;\n    },\n    removeMarkers() {\n      console.log(this.markList);\n      this.map.remove(this.markList);\n      this.markList = [];\n    },\n    addMarkers(type) {\n      console.log(type);\n      // 根据类型添加点\n      if (type == \"Origin\") {\n        this.removeMarkers();\n        this.points = this.origin.filter((data) => {\n          return data != \"\";\n        });\n        this.icon = require(\"../assets/black.png\");\n      } else if (type == \"Expected\") {\n        this.points = this.expected.filter((data) => {\n          return data != \"\";\n        });\n        this.icon = require(\"../assets/blue.png\");\n      } else if (type == \"Result\") {\n        this.points = this.result.filter((data) => {\n          return data != \"\";\n        });\n        this.icon = require(\"../assets/red.png\");\n      }\n      // } else {\n      //   console.log(\"first\");\n      // }\n      this.markList = [];\n      for (let i = 0; i < this.points.length; i++) {\n        var marker = new AMap.Marker({\n          position: this.points[i],\n          offset: new AMap.Pixel(-16, -32),\n          icon: this.icon, // 添加 Icon 实例\n          // icon: this.icon, // 添加 Icon 实例\n          label: {\n            content: i + \"position\",\n            direction: \"bottom\",\n          },\n        });\n        this.markList.push(marker);\n      }\n      console.log(\"length:\", this.markList.length);\n      this.map.add(this.markList);\n    },\n    async init() {\n      // 获得轨迹数据\n      let res = await this.$axios.get(\"/result.json\");\n      // 选择的第16条数据\n      this.date = res.data.date[15];\n      this.time_id = res.data.time[15];\n      this.user_id = res.data.user[15];\n      this.origin = res.data.origin[15];\n      this.expected = res.data.expected[15];\n      this.result = res.data.result[15];\n      // console.log(\"date:\", this.date);\n      // console.log(\"time_id:\", this.time_id);\n      // console.log(\"user_id:\", this.user_id);\n      // console.log(\"origin:\", this.origin);\n      // console.log(\"expected:\", this.expected);\n      // console.log(\"result:\", this.result);\n      AMapLoader.load({\n        key: \"ddd292c88aa1bad9c04891a47724f40a\", //设置您的key\n        version: \"2.0\",\n        plugins: [\"AMap.ToolBar\", \"AMap.Driving\"],\n        AMapUI: {\n          version: \"1.1\",\n          plugins: [\"overlay/SimpleMarker\"],\n        },\n        Loca: {\n          version: \"2.0\",\n        },\n      })\n        .then((AMap) => {\n          this.map = new AMap.Map(\"container\", {\n            viewMode: \"3D\",\n            zoom: 11.5,\n            // zooms: [2, 22],\n            center: this.center,\n          });\n          // 初始化点\n          for (let i = 0; i < this.points.length; i++) {\n            var marker = new AMap.Marker({\n              position: this.points[i],\n              label: {\n                content: \"初始点\",\n                direction: \"bottom\",\n              },\n            });\n            this.markList.push(marker);\n          }\n          console.log(\"length:\", this.markList.length);\n          this.map.add(this.markList);\n\n          // this.addMarkers();\n        })\n        .catch((e) => {\n          console.log(e);\n        });\n    },\n  },\n};\n</script>\n<style  scoped>\n.home_div {\n  padding: 0px;\n  margin: 0px;\n  width: 100%;\n  height: 100%;\n  /* position: relative; */\n}\n#container {\n  /* padding: 20px; */\n  margin: 10px;\n  width: 100% - 20px;\n  height: 100%;\n  /* position: absolute; */\n}\n.map_title {\n  /* position: absolute;\n  z-index: 1; */\n  width: 100%;\n  height: 50px;\n  background-color: rgba(27, 25, 27, 0.884);\n}\nh3 {\n  /* position: absolute; */\n  /* left: 10px; */\n  /* z-index: 2; */\n  color: white;\n}\nbtn_box {\n  margin: 10px;\n  padding: 10px;\n}\n</style>"]}]}