{"remainingRequest":"E:\\vue\\user-trajectory-reconstruction\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\vue\\user-trajectory-reconstruction\\src\\views\\MapContainer.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\vue\\user-trajectory-reconstruction\\src\\views\\MapContainer.vue","mtime":1655376894954},{"path":"E:\\vue\\user-trajectory-reconstruction\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\vue\\user-trajectory-reconstruction\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"E:\\vue\\user-trajectory-reconstruction\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\vue\\user-trajectory-reconstruction\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBBTWFwTG9hZGVyIGZyb20gIkBhbWFwL2FtYXAtanNhcGktbG9hZGVyIjsKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICJNYXB2aWV3IiwKICBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgbWFwOiBudWxsLAogICAgICBkcml2aW5nOiBudWxsLAogICAgICBjYXI6IG51bGwsCiAgICAgIHBvbHlsaW5lOiBudWxsLAogICAgICBpY29uOiAiaHR0cDovL3dlYmFwaS5hbWFwLmNvbS90aGVtZS92MS4zL21hcmtlcnMvbi9tYXJrX3IucG5nIiwKICAgICAgZGF0ZTogIiIsCiAgICAgIHRpbWVfaWQ6ICIiLAogICAgICB1c2VyX2lkOiAiMCIsCiAgICAgIG9yaWdpbjogW10sIC8vIOi9qOi/ueeCuQogICAgICBleHBlY3RlZDogW10sIC8vIOi9qOi/ueeCuQogICAgICByZXN1bHQ6IFtdLCAvLyDovajov7nngrkKICAgICAgY2VudGVyOiBbMTE2LjQwNzM4NywgMzkuOTA0MTc5XSwgIC8vIOWMl+S6rAogICAgICAvLyBjZW50ZXI6IFsxMTIuODUxMjc0LCAzNS40OTc1NTNdLCAvLyDlsbHopb/mmYvln44KICAgICAgcG9pbnRzOiBbWzExNi40MDczODcsIDM5LjkwNDE3OV1dLCAvL+i9qOi/ueeCuS3ph43lpI0KICAgICAgbWFya2VyX3BvaW50czogW10sIC8v5LiN6YeN5aSN55qE6L2o6L+55Z2Q5qCH54K5CiAgICAgIGNvbnRlbnQ6IFtdLAogICAgICBtYXJrTGlzdDogW10sCiAgICAgIHBhdGg6IFtdLCAvLyDot6/lvoQKICAgICAgc3RhcnQ6IG51bGwsCiAgICAgIGxpbmU6IFtdLAogICAgICBhbmltYXRpb246IGZhbHNlLAogICAgfTsKICB9LAogIGNyZWF0ZWQoKSB7fSwKICBtb3VudGVkKCkgewogICAgdGhpcy5pbml0KCk7CiAgfSwKICBtZXRob2RzOiB7CiAgICBzZXRjZW50ZXIoKSB7CiAgICAgIHZhciBtYXAgPSB0aGlzLm1hcDsKICAgICAgLy8gY29uc29sZS5sb2codGhpcy5jYXIpOwogICAgICBjb25zb2xlLmxvZyh0aGlzLmNhci5nZXRQb3NpdGlvbigpKTsKICAgICAgbWFwLnNldENlbnRlcih0aGlzLmNhci5nZXRQb3NpdGlvbigpLCB0cnVlKTsKICAgICAgLy8gbWFwLnNldFpvb21BbmRDZW50ZXIoMTUsIHRoaXMuY2FyLmdldFBvc2l0aW9uKCkpOwogICAgICAvLyB0aGlzLmNhci5vbigibW92aW5nIiwgZnVuY3Rpb24gKGUpIHsKICAgICAgLy8gICBtYXAuc2V0Q2VudGVyKGUudGFyZ2V0LmdldFBvc2l0aW9uKCksIHRydWUpOwogICAgICAvLyB9KTsKICAgIH0sCiAgICBhZGRpbmZvKCkgewogICAgICAvLyDkv6Hmga/nqpfkvZPnmoTlhoXlrrkKICAgICAgdmFyIGRhdGUgPQogICAgICAgIHRoaXMuZGF0ZS5zbGljZSgwLCA0KSArCiAgICAgICAgIuW5tCIgKwogICAgICAgIHRoaXMuZGF0ZS5zbGljZSg0LCA2KSArCiAgICAgICAgIuaciCIgKwogICAgICAgIHRoaXMuZGF0ZS5zbGljZSg2LCA4KSArCiAgICAgICAgIuaXpSI7CiAgICAgIHZhciBjb250ZW50ID0gWwogICAgICAgICI8ZGl2PjxkaXY+PGI+55So5oi3SUQ6ICIgKyB0aGlzLnVzZXJfaWQgKyAiPC9iPiIsCiAgICAgICAgIuaXpeacn++8miIgKyBkYXRlLAogICAgICAgICLml7bpl7TvvJo8L2Rpdj48L2Rpdj4iLAogICAgICBdOwoKICAgICAgLy8g5Yib5bu6IGluZm9XaW5kb3cg5a6e5L6LCiAgICAgIHZhciBpbmZvV2luZG93ID0gbmV3IEFNYXAuSW5mb1dpbmRvdyh7CiAgICAgICAgY29udGVudDogY29udGVudC5qb2luKCI8YnI+IiksIC8v5Lyg5YWlIGRvbSDlr7nosaHvvIzmiJbogIUgaHRtbCDlrZfnrKbkuLIKICAgICAgfSk7CiAgICAgIHZhciBtYXAgPSB0aGlzLm1hcDsKICAgICAgLy8g5omT5byA5L+h5oGv56qX5L2TCiAgICAgIGluZm9XaW5kb3cub3BlbihtYXAsIG1hcC5nZXRDZW50ZXIoKSk7CiAgICB9LAogICAgLy8g57uP57qs5bqm6am+6L2m6Lev57q/6KeE5YiS77yaaHR0cHM6Ly9sYnMuYW1hcC5jb20vZGVtby9qc2FwaS12Mi9leGFtcGxlL2RyaXZpbmctcm91dGUvcGxhbi1yb3V0ZS1hY2NvcmRpbmctdG8tbG5nbGF0CiAgICAvLyDot6/lvoTop4TliJLvvJpodHRwczovL2xicy5hbWFwLmNvbS9hcGkvd2Vic2VydmljZS9ndWlkZS9hcGkvZGlyZWN0aW9uI2RyaXZpbmcKICAgIC8vIOS/oeaBr+eql+S9k++8mmh0dHBzOi8vYmxvZy5jc2RuLm5ldC9tMF8zNzM1NTk1MS9hcnRpY2xlL2RldGFpbHMvNzc1Mjc2ODYKICAgIC8vIOWKqOeUu++8mmh0dHBzOi8vYmxvZy5jc2RuLm5ldC93ZWl4aW5fNDU1NTkxMzUvYXJ0aWNsZS9kZXRhaWxzLzExMDAwMTEzOT9zcG09MTAwMS4yMTAxLjMwMDEuNjY1MC4xJnV0bV9tZWRpdW09ZGlzdHJpYnV0ZS5wY19yZWxldmFudC5ub25lLXRhc2stYmxvZy0yJTdFZGVmYXVsdCU3RUNUUkxJU1QlN0VkZWZhdWx0LTEucGNfcmVsZXZhbnRfZGVmYXVsdCZkZXB0aF8xLXV0bV9zb3VyY2U9ZGlzdHJpYnV0ZS5wY19yZWxldmFudC5ub25lLXRhc2stYmxvZy0yJTdFZGVmYXVsdCU3RUNUUkxJU1QlN0VkZWZhdWx0LTEucGNfcmVsZXZhbnRfZGVmYXVsdCZ1dG1fcmVsZXZhbnRfaW5kZXg9MgogICAgLy8g5LiA5Lqb5Y+C6ICD77yaaHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0ODYxMDE1L2FydGljbGUvZGV0YWlscy8xMjI3MjY2MDk/c3BtPTEwMDEuMjEwMS4zMDAxLjY2NTAuNCZ1dG1fbWVkaXVtPWRpc3RyaWJ1dGUucGNfcmVsZXZhbnQubm9uZS10YXNrLWJsb2ctMiU3RWRlZmF1bHQlN0VDVFJMSVNUJTdFZGVmYXVsdC00LnBjX3JlbGV2YW50X2RlZmF1bHQmZGVwdGhfMS11dG1fc291cmNlPWRpc3RyaWJ1dGUucGNfcmVsZXZhbnQubm9uZS10YXNrLWJsb2ctMiU3RWRlZmF1bHQlN0VDVFJMSVNUJTdFZGVmYXVsdC00LnBjX3JlbGV2YW50X2RlZmF1bHQmdXRtX3JlbGV2YW50X2luZGV4PTkKICAgIC8vIGh0dHBzOi8vYmxvZy5jc2RuLm5ldC9hbm5haWhhbnlvdTY1NDIzL2FydGljbGUvZGV0YWlscy8xMDE2NzI5NTMKICAgIC8vIGh0dHBzOi8vYmxvZy5jc2RuLm5ldC93ZWl4aW5fNDE2MTg5MTcvYXJ0aWNsZS9kZXRhaWxzLzExNzI1ODI0Mj9zcG09MTAwMS4yMTAxLjMwMDEuNjY1MC40JnV0bV9tZWRpdW09ZGlzdHJpYnV0ZS5wY19yZWxldmFudC5ub25lLXRhc2stYmxvZy0yJTdFZGVmYXVsdCU3RUJsb2dDb21tZW5kRnJvbUJhaWR1JTdFUmF0ZS00LnBjX3JlbGV2YW50X2FudGlzY2FudjImZGVwdGhfMS11dG1fc291cmNlPWRpc3RyaWJ1dGUucGNfcmVsZXZhbnQubm9uZS10YXNrLWJsb2ctMiU3RWRlZmF1bHQlN0VCbG9nQ29tbWVuZEZyb21CYWlkdSU3RVJhdGUtNC5wY19yZWxldmFudF9hbnRpc2NhbnYyJnV0bV9yZWxldmFudF9pbmRleD01CiAgICAvLyB2dWXpq5jlvrflpJrmnaHovajov7nlr7zoiKor5bim6YCU5b6E6IqC54K55qCH5rOoK+WQhOi3r+e6v+minOiJsuWMuuWIq++8mmh0dHBzOi8vYmxvZy5jc2RuLm5ldC9xcV8yOTEwMTYwOS9hcnRpY2xlL2RldGFpbHMvMTAzNTk3ODQyP3NwbT0xMDAxLjIxMDEuMzAwMS42NjUwLjImdXRtX21lZGl1bT1kaXN0cmlidXRlLnBjX3JlbGV2YW50Lm5vbmUtdGFzay1ibG9nLTIlN0VkZWZhdWx0JTdFQ1RSTElTVCU3RVJhdGUtMi5wY19yZWxldmFudF9wYXljb2x1bW5fdjMmZGVwdGhfMS11dG1fc291cmNlPWRpc3RyaWJ1dGUucGNfcmVsZXZhbnQubm9uZS10YXNrLWJsb2ctMiU3RWRlZmF1bHQlN0VDVFJMSVNUJTdFUmF0ZS0yLnBjX3JlbGV2YW50X3BheWNvbHVtbl92MyZ1dG1fcmVsZXZhbnRfaW5kZXg9MwogICAgLy8gdnVl6auY5b635Y2V5p2hKOWPr+aJuemHjynot6/nur/op4TliJIr5Y2V5p2hKOWPr+aJuemHjynot6/nur/luKbpgJTlvoToioLngrltYXJrZXIr5Y2V5p2hKOWPr+aJuemHjynot6/nur/liIbmrrXmuLLmn5PlkITpopzoibLvvJpodHRwczovL2Jsb2cuY3Nkbi5uZXQvcXFfMjkxMDE2MDkvYXJ0aWNsZS9kZXRhaWxzLzEwNjIzNzgzNz91dG1fbWVkaXVtPWRpc3RyaWJ1dGUucGNfcmVsZXZhbnQubm9uZS10YXNrLWJsb2ctMn5kZWZhdWx0fmJhaWR1anNfYmFpZHVsYW5kaW5nd29yZH5kZWZhdWx0LTAucGNfcmVsZXZhbnRfZGVmYXVsdCZzcG09MTAwMS4yMTAxLjMwMDEuNDI0Mi4xJnV0bV9yZWxldmFudF9pbmRleD0zCgogICAgYWRkQ2FyKHBvcykgewogICAgICAvLyDmoLnmja5wb3Pmt7vliqDlsI/ovaYKICAgICAgdGhpcy5jYXIgPSBuZXcgQU1hcC5NYXJrZXIoewogICAgICAgIHBvc2l0aW9uOiBwb3MsCiAgICAgICAgLy8gaWNvbjogImh0dHBzOi8vd2ViYXBpLmFtYXAuY29tL2ltYWdlcy9jYXIucG5nIiwKICAgICAgICBpY29uOiByZXF1aXJlKCIuLi9hc3NldHMvMS5wbmciKSwKICAgICAgICBvZmZzZXQ6IG5ldyBBTWFwLlBpeGVsKC0xMi41LCAtMjQpLAogICAgICAgIGFuZ2xlOiA5MCwgLy/lm77niYfml4vovazop5LluqYKICAgICAgfSk7CiAgICAgIHRoaXMubWFwLmFkZCh0aGlzLmNhcik7CiAgICB9LAogICAgY2xlYXIoKSB7CiAgICAgIC8vIOa4hemZpOWcsOWbvgogICAgICB0aGlzLmFuaW1hdGlvbiA9IGZhbHNlOwogICAgICB2YXIgbWFwID0gdGhpcy5tYXA7CiAgICAgIG1hcC5jbGVhck1hcCgpOwogICAgICAvLyAvLyDmuIXpmaTku6XliY3nmoTooYznu4/ot6/nur8KICAgICAgLy8gaWYgKHRoaXMuZHJpdmluZykgewogICAgICAvLyAgIHRoaXMuZHJpdmluZy5jbGVhcigpOwogICAgICAvLyB9CiAgICB9LAogICAgc3RhcnRBbmltYXRpb24oKSB7CiAgICAgIHZhciBtYXAgPSB0aGlzLm1hcDsKICAgICAgLy8gbWFwLnNldFpvb20oMTgpCiAgICAgIGNvbnNvbGUubG9nKCJwYXRoOiIsIHRoaXMucGF0aCk7CiAgICAgIC8vIHZhciB0ZW1wID0gdGhpcy5wYXRoWzBdOwogICAgICB0aGlzLmxpbmUgPSB0aGlzLnBhdGhbMF07CiAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgdGhpcy5wYXRoLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgLy8gdGVtcCA9IHRlbXAuY29uY2F0KHRoaXMucGF0aFtpXSk7CiAgICAgICAgdGhpcy5saW5lID0gdGhpcy5saW5lLmNvbmNhdCh0aGlzLnBhdGhbaV0pOwogICAgICB9CiAgICAgIC8v57uY5Yi257uP6L+H55qE6L2o6L+5CiAgICAgIHZhciBwYXNzZWRQb2x5bGluZSA9IG5ldyBBTWFwLlBvbHlsaW5lKHsKICAgICAgICBtYXA6IG1hcCwKICAgICAgICBzdHJva2VDb2xvcjogIiMwMEZGMDAiLCAvL+e6v+minOiJsgogICAgICAgIHN0cm9rZU9wYWNpdHk6IDAuOSwgLy/nur/pgI/mmI7luqYKICAgICAgICBzaG93RGlyOiB0cnVlLAogICAgICAgIHN0cm9rZVdlaWdodDogNywgLy/nur/lrr0KICAgICAgICBsaW5lSm9pbjogInJvdW5kIiwKICAgICAgfSk7CiAgICAgIHRoaXMuY2FyLm9uKCJtb3ZpbmciLCAoZSkgPT4gewogICAgICAgIHBhc3NlZFBvbHlsaW5lLnNldFBhdGgoZS5wYXNzZWRQYXRoKTsKICAgICAgICAvLyBtYXAuc2V0Q2VudGVyKGUudGFyZ2V0LmdldFBvc2l0aW9uKCksIHRydWUpOwogICAgICB9KTsKCiAgICAgIGNvbnNvbGUubG9nKCJsaW5lOiIsIHRoaXMubGluZSk7CiAgICAgIHRoaXMuY2FyLm1vdmVBbG9uZyh0aGlzLmxpbmUsIHsKICAgICAgICAvLyDmr4/kuIDmrrXnmoTml7bplb8KICAgICAgICAvLyBkdXJhdGlvbjogMzAwLCAvL+WPr+agueaNruWunumZhemHh+mbhuaXtumXtOmXtOmalOiuvue9rgogICAgICAgIHNwZWVkOiAxMDAwLAogICAgICAgIGF1dG9Sb3RhdGlvbjogdHJ1ZSwKICAgICAgICAvLyBKU0FQSTIuMCDmmK/lkKblu7bpgZPot6/oh6rliqjorr7nva7op5LluqblnKggbW92ZUFsb25nIOmHjOiuvue9rgogICAgICB9KTsKICAgICAgdGhpcy5wYXVzZUFuaW1hdGlvbigpOwogICAgICB0aGlzLnJlc3VtZUFuaW1hdGlvbigpOwogICAgICB0aGlzLnBhdXNlQW5pbWF0aW9uKCk7CiAgICAgIHRoaXMucmVzdW1lQW5pbWF0aW9uKCk7CiAgICB9LAogICAgcGF1c2VBbmltYXRpb24oKSB7CiAgICAgIC8v5pqC5YGc5Yqo55S7CiAgICAgIHRoaXMuY2FyLnBhdXNlTW92ZSgpOwogICAgfSwKICAgIHJlc3VtZUFuaW1hdGlvbigpIHsKICAgICAgLy8g57un57ut5Yqo55S7CiAgICAgIHRoaXMuY2FyLnJlc3VtZU1vdmUoKTsKICAgIH0sCiAgICBzdG9wQW5pbWF0aW9uKCkgewogICAgICAvLyDlgZzmraLliqjnlLsKICAgICAgdGhpcy5jYXIuc3RvcE1vdmUoKTsKICAgIH0sCiAgICBDb2xvcigpIHsKICAgICAgdmFyIHIgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAyNTUpOwogICAgICB2YXIgZyA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDI1NSk7CiAgICAgIHZhciBiID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMjU1KTsKICAgICAgcmV0dXJuICJyZ2JhKCIgKyByICsgIiwiICsgZyArICIsIiArIGIgKyAiLDAuOCkiOwogICAgfSwKICAgIGdldERpc3BhdGNoRGV0YWlsKCkgewogICAgICBjb25zdCBsaW5lQ29sb3IgPSAiIzAwMDBGRiI7CiAgICAgIC8vIOWPr+S7pemaj+acuue6v+eahOminOiJsgogICAgICB0aGlzLmRyaXZpbmcgPSBuZXcgQU1hcC5Ecml2aW5nKHsKICAgICAgICAvLyDpqb7ovabot6/nur/op4TliJLnrZbnlaXvvIxBTWFwLkRyaXZpbmdQb2xpY3kuTEVBU1RfVElNReaYr+acgOW/q+aNt+aooeW8jyzov5jmnInlhbbku5blh6Dnp43mlrnlvI/op4FBcGnmlofmoaMKICAgICAgICBwb2xpY3k6IEFNYXAuRHJpdmluZ1BvbGljeS5MRUFTVF9USU1FLAogICAgICB9KTsKICAgICAgLy8g55uu5YmN5L2/55So5Y6f57uT5p6c54K56L+b6KGM5rWL6K+VCiAgICAgIC8vIHZhciBkYXRhID0gdGhpcy5leHBlY3RlZC5maWx0ZXIoKGRhdGEpID0+IHsKICAgICAgLy8gICByZXR1cm4gZGF0YSAhPSAiIjsKICAgICAgLy8gfSk7CiAgICAgIHZhciBkYXRhID0gdGhpcy5wb2ludHM7CiAgICAgIC8vIHZhciBkYXRhID0gdGhpcy5yZXN1bHQuZmlsdGVyKChkYXRhKSA9PiB7CiAgICAgIC8vICAgcmV0dXJuIGRhdGEgIT0gIiI7CiAgICAgIC8vIH0pOwogICAgICAvLyDorr7nva7otbfngrkKICAgICAgdGhpcy5zdGFydCA9IGRhdGFbMF07CiAgICAgIHRoaXMuYWRkQ2FyKHRoaXMuc3RhcnQpOwogICAgICB2YXIgbWFwID0gdGhpcy5tYXA7CiAgICAgIHRoaXMucGF0aCA9IG5ldyBBcnJheShkYXRhLmxlbmd0aCAtIDEpOwogICAgICAvLyBjb25zb2xlLmxvZygibGVuZ3RoOiIsIHRoaXMucGF0aC5sZW5ndGgpOwogICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRhdGEubGVuZ3RoIC0gMTsgaSsrKSB7CiAgICAgICAgLy8g6Kej5YazdGhpcy5kcml2aW5nLnNlYXJjaOeahOWbnuiwg+WHveaVsOW8guatpemXrumimAogICAgICAgIHRoaXMuZHJhd01hcExpbmUoCiAgICAgICAgICBkYXRhW2ldWzBdLAogICAgICAgICAgZGF0YVtpXVsxXSwKICAgICAgICAgIGRhdGFbaSArIDFdWzBdLAogICAgICAgICAgZGF0YVtpICsgMV1bMV0sCiAgICAgICAgICBtYXAsCiAgICAgICAgICBsaW5lQ29sb3IsCiAgICAgICAgICBpCiAgICAgICAgKTsKICAgICAgfQogICAgICAvLyBtYXAuc2V0Wm9vbSgxOCk7CiAgICAgIHRoaXMuYW5pbWF0aW9uID0gdHJ1ZTsKICAgICAgbWFwLnNldEZpdFZpZXcoKTsKICAgICAgbWFwLnNldFpvb21BbmRDZW50ZXIoMTQsIHRoaXMuY2FyLmdldFBvc2l0aW9uKCkpOwogICAgfSwKICAgIC8vIHN0YXJ0X3g66LW354K555qE5qiq5Z2Q5qCHLHN0YXJ0X3nvvJrotbfngrnnmoTnurXlnZDmoIcsZW5kX3g657uI54K555qE5qiq5Z2Q5qCHLGVuZF95Oue7iOeCueeahOe6teWdkOaghyxtYXA65a6e5L6L5YyWbWFwKHRoaXMubWFwKSxjb2xvcjrpmo/mnLrnur/nmoTpopzoibIKICAgIC8vIOe7mOWItui3r+W+hAogICAgZHJhd01hcExpbmUoc3RhcnRfeCwgc3RhcnRfeSwgZW5kX3gsIGVuZF95LCBtYXAsIGNvbG9yLCBpKSB7CiAgICAgIG1hcC5wbHVnaW4oIkFNYXAuRHJpdmluZyIsICgpID0+IHsKICAgICAgICB2YXIgc3RhcnRfeHkgPSBuZXcgQU1hcC5MbmdMYXQoc3RhcnRfeCwgc3RhcnRfeSk7IC8v6LW354K5CiAgICAgICAgdmFyIGVuZF94eSA9IG5ldyBBTWFwLkxuZ0xhdChlbmRfeCwgZW5kX3kpOyAvLyDnu4jngrkKICAgICAgICAvLyDmoLnmja7otbfnu4jngrnnu4/nuqzluqbop4TliJLpqb7ovablr7zoiKog6Lev57q/CiAgICAgICAgdGhpcy5kcml2aW5nLnNlYXJjaChzdGFydF94eSwgZW5kX3h5LCAoc3RhdHVzLCByZXN1bHQpID0+IHsKICAgICAgICAgIC8vIGNvbnNvbGUubG9nKHN0YXJ0X3h5LCBlbmRfeHkpOwogICAgICAgICAgaWYgKHN0YXR1cyA9PT0gImNvbXBsZXRlIikgewogICAgICAgICAgICBpZiAocmVzdWx0LnJvdXRlcyAmJiByZXN1bHQucm91dGVzLmxlbmd0aCkgewogICAgICAgICAgICAgIC8vIOe7mOWItui3r+e6v+inhOWIkueahOesrOS4gOadoei3r+e6v++8jOS5n+WPr+S7peaMiemcgOaxgue7mOWItuWFtuWug+WHoOadoei3r+e6vwogICAgICAgICAgICAgIHZhciBwYXRoID0gdGhpcy5wYXJzZVJvdXRlVG9QYXRoKHJlc3VsdC5yb3V0ZXNbMF0pOwogICAgICAgICAgICAgIC8vIHRoaXMuZHJpdmluZy5zZWFyY2jnmoTlm57osIPlh73mlbDlrZjlnKjlvILmraXpl67popjvvIznlKjmlbDnu4TmlrnlvI/op6PlhrMKICAgICAgICAgICAgICB0aGlzLnBhdGhbaV0gPSBwYXRoOwogICAgICAgICAgICAgIHRoaXMucm91dGVMaW5lID0gbmV3IEFNYXAuUG9seWxpbmUoewogICAgICAgICAgICAgICAgbWFwOiBtYXAsCiAgICAgICAgICAgICAgICBwYXRoOiBwYXRoLAogICAgICAgICAgICAgICAgc2hvd0RpcjogdHJ1ZSwKICAgICAgICAgICAgICAgIGlzT3V0bGluZTogdHJ1ZSwKICAgICAgICAgICAgICAgIG91dGxpbmVDb2xvcjogIiNmZmVlZWUiLAogICAgICAgICAgICAgICAgYm9yZGVyV2VpZ2h0OiAyLAogICAgICAgICAgICAgICAgc3Ryb2tlV2VpZ2h0OiA2LAogICAgICAgICAgICAgICAgc3Ryb2tlQ29sb3I6IGNvbG9yLAogICAgICAgICAgICAgICAgbGluZUpvaW46ICJyb3VuZCIsCiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coIue7mOWItumpvui9pui3r+e6v+WujOaIkCIpOwogICAgICAgICAgICB9CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBjb25zb2xlLmxvZygi6I635Y+W6am+6L2m5pWw5o2u5aSx6LSl77yaIiArIHJlc3VsdCk7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfSwKICAgIC8vIOiuoeeul+WQhOS4quaLkOeCueS9jee9rgogICAgcGFyc2VSb3V0ZVRvUGF0aChyb3V0ZSkgewogICAgICB2YXIgcGF0aCA9IFtdOwogICAgICBmb3IgKHZhciBpID0gMCwgbCA9IHJvdXRlLnN0ZXBzLmxlbmd0aDsgaSA8IGw7IGkrKykgewogICAgICAgIHZhciBzdGVwID0gcm91dGUuc3RlcHNbaV07CiAgICAgICAgZm9yICh2YXIgaiA9IDAsIG4gPSBzdGVwLnBhdGgubGVuZ3RoOyBqIDwgbjsgaisrKSB7CiAgICAgICAgICBwYXRoLnB1c2goc3RlcC5wYXRoW2pdKTsKICAgICAgICB9CiAgICAgIH0KICAgICAgcmV0dXJuIHBhdGg7CiAgICB9LAogICAgcmVtb3ZlTWFya2VycygpIHsKICAgICAgLy8g5Y676Zmk546w5Zyo55qE5Z2Q5qCH54K55YiX6KGoCiAgICAgIC8vIGNvbnNvbGUubG9nKHRoaXMubWFya0xpc3QpOwogICAgICB0aGlzLm1hcC5yZW1vdmUodGhpcy5tYXJrTGlzdCk7CiAgICAgIHRoaXMubWFya0xpc3QgPSBbXTsKICAgIH0sCiAgICBhZGRNYXJrZXJzKHR5cGUpIHsKICAgICAgY29uc29sZS5sb2codHlwZSk7CiAgICAgIGxldCB0eXBlX3N0ciA9ICIiOwogICAgICAvLyDmoLnmja7nsbvlnovmt7vliqDngrkKICAgICAgaWYgKHR5cGUgPT0gIk9yaWdpbiIpIHsKICAgICAgICB0aGlzLnJlbW92ZU1hcmtlcnMoKTsKICAgICAgICB0aGlzLnBvaW50cyA9IHRoaXMub3JpZ2luLmZpbHRlcigoZGF0YSkgPT4gewogICAgICAgICAgcmV0dXJuIGRhdGEgIT0gIiI7CiAgICAgICAgfSk7CiAgICAgICAgLy8gY29uc29sZS5sb2coIm9yaWdpbjoiLHRoaXMucG9pbnRzKTsKICAgICAgICB0eXBlX3N0ciA9ICLovpPlhaXovajov7kiOwogICAgICAgIHRoaXMuaWNvbiA9IHJlcXVpcmUoIi4uL2Fzc2V0cy9ibGFjay5wbmciKTsKICAgICAgfSBlbHNlIGlmICh0eXBlID09ICJFeHBlY3RlZCIpIHsKICAgICAgICB0aGlzLnJlbW92ZU1hcmtlcnMoKTsKICAgICAgICB0aGlzLnBvaW50cyA9IHRoaXMuZXhwZWN0ZWQuZmlsdGVyKChkYXRhKSA9PiB7CiAgICAgICAgICByZXR1cm4gZGF0YSAhPSAiIjsKICAgICAgICB9KTsKICAgICAgICB0eXBlX3N0ciA9ICLljp/lp4vovajov7kiOwogICAgICAgIC8vIGNvbnNvbGUubG9nKCJFeHBlY3RlZDoiLHRoaXMucG9pbnRzKTsKICAgICAgICB0aGlzLmljb24gPSByZXF1aXJlKCIuLi9hc3NldHMvYmx1ZS5wbmciKTsKICAgICAgfSBlbHNlIGlmICh0eXBlID09ICJSZXN1bHQiKSB7CiAgICAgICAgdGhpcy5yZW1vdmVNYXJrZXJzKCk7CiAgICAgICAgdGhpcy5wb2ludHMgPSB0aGlzLnJlc3VsdC5maWx0ZXIoKGRhdGEpID0+IHsKICAgICAgICAgIHJldHVybiBkYXRhICE9ICIiOwogICAgICAgIH0pOwogICAgICAgIHR5cGVfc3RyID0gIumihOa1i+i9qOi/uSI7CiAgICAgICAgLy8gY29uc29sZS5sb2coIlJlc3VsdDoiLHRoaXMucG9pbnRzKTsKICAgICAgICB0aGlzLmljb24gPSByZXF1aXJlKCIuLi9hc3NldHMvcmVkLnBuZyIpOwogICAgICB9CiAgICAgIGNvbnNvbGUubG9nKHR5cGVfc3RyKTsKICAgICAgdGhpcy5tYXJrTGlzdCA9IFtdOwogICAgICB0aGlzLm1hcmtlcl9wb2ludHMgPSBbXTsKICAgICAgdmFyIGNvbnRlbnQgPSBbXTsKICAgICAgdmFyIGNvbnRlbnRfdGVtcCA9ICIiOwogICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucG9pbnRzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgdGhpcy5tYXJrZXJfcG9pbnRzLnB1c2godGhpcy5wb2ludHNbaV0pOwogICAgICB9CiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5tYXJrZXJfcG9pbnRzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgLy8g5Y676Zmk6YeN5aSN55qE54K5CiAgICAgICAgZm9yICh2YXIgaiA9IGkgKyAxOyBqIDwgdGhpcy5tYXJrZXJfcG9pbnRzLmxlbmd0aDsgaisrKSB7CiAgICAgICAgICBpZiAoCiAgICAgICAgICAgIHRoaXMubWFya2VyX3BvaW50c1tpXVswXSA9PSB0aGlzLm1hcmtlcl9wb2ludHNbal1bMF0gJiYKICAgICAgICAgICAgdGhpcy5tYXJrZXJfcG9pbnRzW2ldWzFdID09IHRoaXMubWFya2VyX3BvaW50c1tqXVsxXQogICAgICAgICAgKSB7CiAgICAgICAgICAgIHRoaXMubWFya2VyX3BvaW50cy5zcGxpY2UoaiwgMSk7CiAgICAgICAgICAgIGotLTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLm1hcmtlcl9wb2ludHMubGVuZ3RoOyBpKyspIHsKICAgICAgICBjb250ZW50X3RlbXAgPSAiIjsKICAgICAgICBpZiAoaSA9PSAwKSB7CiAgICAgICAgICBjb250ZW50X3RlbXAgPSAi6LW354K5IjsKICAgICAgICB9IGVsc2UgaWYgKGkgPT0gdGhpcy5tYXJrZXJfcG9pbnRzLmxlbmd0aCAtIDEpIHsKICAgICAgICAgIGNvbnRlbnRfdGVtcCA9ICLnu4jngrkiOwogICAgICAgIH0KICAgICAgICBmb3IgKGxldCBqID0gMTsgaiA8IHRoaXMucG9pbnRzLmxlbmd0aCAtIDE7IGorKykgewogICAgICAgICAgaWYgKAogICAgICAgICAgICB0aGlzLm1hcmtlcl9wb2ludHNbaV1bMF0gPT0gdGhpcy5wb2ludHNbal1bMF0gJiYKICAgICAgICAgICAgdGhpcy5tYXJrZXJfcG9pbnRzW2ldWzFdID09IHRoaXMucG9pbnRzW2pdWzFdCiAgICAgICAgICApIHsKICAgICAgICAgICAgaWYgKGNvbnRlbnRfdGVtcCA9PSAiIikgewogICAgICAgICAgICAgIGNvbnRlbnRfdGVtcCA9ICLpgJTlvoTngrkiICsgajsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBjb250ZW50X3RlbXAgPSBjb250ZW50X3RlbXAgKyAiJumAlOW+hOeCuSIgKyBqOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGNvbnRlbnQucHVzaChjb250ZW50X3RlbXApOwogICAgICB9CiAgICAgIC8vIGNvbnNvbGUubG9nKCJjb250ZW50OiIsIGNvbnRlbnQpOwogICAgICAvLyBjb25zb2xlLmxvZygi6YeN5aSNOiIsIHRoaXMucG9pbnRzKTsKICAgICAgLy8gY29uc29sZS5sb2coIuS4jemHjeWkje+8miIsIHRoaXMubWFya2VyX3BvaW50cyk7CiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5tYXJrZXJfcG9pbnRzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgdmFyIG1hcmtlciA9IG5ldyBBTWFwLk1hcmtlcih7CiAgICAgICAgICBwb3NpdGlvbjogdGhpcy5tYXJrZXJfcG9pbnRzW2ldLAogICAgICAgICAgb2Zmc2V0OiBuZXcgQU1hcC5QaXhlbCgtMTYsIC0zMiksCiAgICAgICAgICBpY29uOiB0aGlzLmljb24sIC8vIOa3u+WKoCBJY29uIOWunuS+iwogICAgICAgICAgbGFiZWw6IHsKICAgICAgICAgICAgY29udGVudDogY29udGVudFtpXSwKICAgICAgICAgICAgZGlyZWN0aW9uOiAiYm90dG9tIiwKICAgICAgICAgIH0sCiAgICAgICAgfSk7CiAgICAgICAgbWFya2VyLmNvbnRlbnQgPSBbY29udGVudFtpXSwgdGhpcy5tYXJrZXJfcG9pbnRzW2ldLCB0eXBlX3N0cl07CiAgICAgICAgbWFya2VyLm9uKCJjbGljayIsIHRoaXMubWFya2VyQ2xpY2spOwogICAgICAgIHRoaXMubWFya0xpc3QucHVzaChtYXJrZXIpOwogICAgICB9CiAgICAgIGNvbnNvbGUubG9nKCJsZW5ndGg6IiwgdGhpcy5tYXJrTGlzdC5sZW5ndGgpOwogICAgICB0aGlzLm1hcC5hZGQodGhpcy5tYXJrTGlzdCk7CiAgICAgIHRoaXMubWFwLnNldEZpdFZpZXcoKTsKICAgIH0sCiAgICBtYXJrZXJDbGljayhlKSB7CiAgICAgIC8vIOS/oeaBr+eql+S9k+eahOWGheWuuQogICAgICBjb25zb2xlLmxvZyhlLnRhcmdldC5jb250ZW50KTsKICAgICAgLy8gY29uc29sZS5sb2coZS50YXJnZXQuY29udGVudFsxXVswXSk7CiAgICAgIHZhciBkYXRlID0KICAgICAgICB0aGlzLmRhdGUuc2xpY2UoMCwgNCkgKwogICAgICAgICLlubQiICsKICAgICAgICB0aGlzLmRhdGUuc2xpY2UoNCwgNikgKwogICAgICAgICLmnIgiICsKICAgICAgICB0aGlzLmRhdGUuc2xpY2UoNiwgOCkgKwogICAgICAgICLml6UiOwogICAgICB2YXIgY29udGVudDsKICAgICAgY29udGVudCA9IFsKICAgICAgICAiPGI+IiArIGUudGFyZ2V0LmNvbnRlbnRbMF0gKyAi4oCU4oCUIiArIGUudGFyZ2V0LmNvbnRlbnRbMl0gKyAiPC9iPiIsCiAgICAgICAgIjxiPueUqOaIt0lEOiAiICsgdGhpcy51c2VyX2lkICsgIjwvYj4iLAogICAgICAgICLml6XmnJ86ICIgKyBkYXRlLAogICAgICAgICLnu4/nuqzluqY6IFsiICsKICAgICAgICAgIGUudGFyZ2V0LmNvbnRlbnRbMV1bMF0udG9GaXhlZCgyKSArCiAgICAgICAgICAiLCIgKwogICAgICAgICAgZS50YXJnZXQuY29udGVudFsxXVsxXS50b0ZpeGVkKDIpICsKICAgICAgICAgICJdIiwKICAgICAgICAvLyAi5pe26Ze077yaIiwKICAgICAgXTsKCiAgICAgIC8vIOWIm+W7uiBpbmZvV2luZG93IOWunuS+iwogICAgICB2YXIgaW5mb1dpbmRvdyA9IG5ldyBBTWFwLkluZm9XaW5kb3coewogICAgICAgIGNvbnRlbnQ6IGNvbnRlbnQuam9pbigiPGJyPiIpLCAvL+S8oOWFpSBkb20g5a+56LGh77yM5oiW6ICFIGh0bWwg5a2X56ym5LiyCiAgICAgIH0pOwogICAgICB2YXIgbWFwID0gdGhpcy5tYXA7CiAgICAgIC8vIOaJk+W8gOS/oeaBr+eql+S9kwogICAgICBpbmZvV2luZG93Lm9wZW4obWFwLCBlLnRhcmdldC5nZXRQb3NpdGlvbigpKTsKICAgIH0sCiAgICAvLyDlnLDlm77liJ3lp4vljJYKICAgIGFzeW5jIGluaXQoKSB7CiAgICAgIC8vIExvYWTojrflvpfovajov7nmlbDmja4KICAgICAgbGV0IHJlcyA9IGF3YWl0IHRoaXMuJGF4aW9zLmdldCgiL3Jlc3VsdC5qc29uIik7CiAgICAgIC8vIC8vIOmAieaLqeeahOesrDE25p2h5pWw5o2uCiAgICAgIC8vIHRoaXMuZGF0ZSA9IHJlcy5kYXRhLmRhdGVbMTVdOwogICAgICAvLyB0aGlzLnRpbWVfaWQgPSByZXMuZGF0YS50aW1lWzE1XTsKICAgICAgLy8gdGhpcy51c2VyX2lkID0gcmVzLmRhdGEudXNlclsxNV07CiAgICAgIC8vIHRoaXMub3JpZ2luID0gcmVzLmRhdGEub3JpZ2luWzE1XTsKICAgICAgLy8gdGhpcy5leHBlY3RlZCA9IHJlcy5kYXRhLmV4cGVjdGVkWzE1XTsKICAgICAgLy8gdGhpcy5yZXN1bHQgPSByZXMuZGF0YS5yZXN1bHRbMTVdOwoKICAgICAgLy8g5LuO57uT5p6c5Lit6ZqP5py66YCJ5oup5LiA5p2h5pWw5o2uCiAgICAgIHZhciBpZCA9IDA7CiAgICAgIGlkID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogNTApOwogICAgICAvLyBjb25zb2xlLmxvZygiaWQ6IixpZCk7CiAgICAgIHRoaXMuZGF0ZSA9IHJlcy5kYXRhLmRhdGVbaWRdOwogICAgICB0aGlzLnRpbWVfaWQgPSByZXMuZGF0YS50aW1lW2lkXTsKICAgICAgdGhpcy51c2VyX2lkID0gcmVzLmRhdGEudXNlcltpZF07CiAgICAgIHRoaXMub3JpZ2luID0gcmVzLmRhdGEub3JpZ2luW2lkXTsKICAgICAgdGhpcy5leHBlY3RlZCA9IHJlcy5kYXRhLmV4cGVjdGVkW2lkXTsKICAgICAgdGhpcy5yZXN1bHQgPSByZXMuZGF0YS5yZXN1bHRbaWRdOwoKICAgICAgLy8g6YCJ5oup56ys5LiA5p2h5pWw5o2u5YGa5rWL6K+VCiAgICAgIC8vIHRoaXMuZGF0ZSA9IHJlcy5kYXRhLmRhdGVbMF07CiAgICAgIC8vIHRoaXMudGltZV9pZCA9IHJlcy5kYXRhLnRpbWVbMF07CiAgICAgIC8vIHRoaXMudXNlcl9pZCA9IHJlcy5kYXRhLnVzZXJbMF07CiAgICAgIC8vIC8vIHRoaXMub3JpZ2luID0gcmVzLmRhdGEub3JpZ2luWzBdLnNsaWNlKDAsIDgpOwogICAgICAvLyAvLyB0aGlzLmV4cGVjdGVkID0gcmVzLmRhdGEuZXhwZWN0ZWRbMF0uc2xpY2UoMCwgOCk7CiAgICAgIC8vIC8vIHRoaXMucmVzdWx0ID0gcmVzLmRhdGEucmVzdWx0WzBdLnNsaWNlKDAsIDgpOwogICAgICAvLyB0aGlzLm9yaWdpbiA9IHJlcy5kYXRhLm9yaWdpblswXTsKICAgICAgLy8gdGhpcy5leHBlY3RlZCA9IHJlcy5kYXRhLmV4cGVjdGVkWzBdOwogICAgICAvLyB0aGlzLnJlc3VsdCA9IHJlcy5kYXRhLnJlc3VsdFswXTsKICAgICAgLy8gY29uc29sZS5sb2codGhpcy5vcmlnaW4sIHRoaXMuZXhwZWN0ZWQsIHRoaXMucmVzdWx0KTsKCiAgICAgIEFNYXBMb2FkZXIubG9hZCh7CiAgICAgICAga2V5OiAiZGRkMjkyYzg4YWExYmFkOWMwNDg5MWE0NzcyNGY0MGEiLCAvL+iuvue9ruaCqOeahGtleQogICAgICAgIHZlcnNpb246ICIyLjAiLAogICAgICAgIC8vIHZlcnNpb246IjEuNC40IiwKICAgICAgICBwbHVnaW5zOiBbCiAgICAgICAgICAiQU1hcC5Ub29sQmFyIiwKICAgICAgICAgICJBTWFwLkRyaXZpbmciLAogICAgICAgICAgIkFNYXAuTW92ZUFuaW1hdGlvbiIsCiAgICAgICAgICAiQU1hcC5TY2FsZSIsCiAgICAgICAgICAiQU1hcC5IYXdrRXllIiwKICAgICAgICAgICJBTWFwLk1hcFR5cGUiLAogICAgICAgICAgIkFNYXAuQ29udHJvbEJhciIsCiAgICAgICAgXSwKICAgICAgICBBTWFwVUk6IHsKICAgICAgICAgIHZlcnNpb246ICIxLjEiLAogICAgICAgICAgcGx1Z2luczogWyJvdmVybGF5L1NpbXBsZU1hcmtlciJdLAogICAgICAgIH0sCiAgICAgICAgTG9jYTogewogICAgICAgICAgdmVyc2lvbjogIjIuMCIsCiAgICAgICAgICAvLyB2ZXJzaW9uOiIxLjQuNCIsCiAgICAgICAgfSwKICAgICAgfSkKICAgICAgICAudGhlbigoQU1hcCkgPT4gewogICAgICAgICAgdGhpcy5tYXAgPSBuZXcgQU1hcC5NYXAoImNvbnRhaW5lciIsIHsKICAgICAgICAgICAgdmlld01vZGU6ICIzRCIsCiAgICAgICAgICAgIC8vIHpvb206IDExLjUsCiAgICAgICAgICAgIHpvb206MTUsCiAgICAgICAgICAgIC8vIHpvb21zOiBbMiwgMjJdLAogICAgICAgICAgICBjZW50ZXI6IHRoaXMuY2VudGVyLAogICAgICAgICAgfSk7CiAgICAgICAgICB0aGlzLm1hcC5hZGRDb250cm9sKG5ldyBBTWFwLlNjYWxlKCkpOwogICAgICAgICAgdGhpcy5tYXAuYWRkQ29udHJvbChuZXcgQU1hcC5Ub29sQmFyKCkpOwogICAgICAgICAgdGhpcy5tYXAuYWRkQ29udHJvbChuZXcgQU1hcC5IYXdrRXllKCkpOwogICAgICAgICAgdGhpcy5tYXAuYWRkQ29udHJvbChuZXcgQU1hcC5NYXBUeXBlKCkpOwogICAgICAgICAgdGhpcy5tYXAuYWRkQ29udHJvbChuZXcgQU1hcC5Db250cm9sQmFyKCkpOwoKICAgICAgICAgIC8vIOWIneWni+WMlueCuQogICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnBvaW50cy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICB2YXIgbWFya2VyID0gbmV3IEFNYXAuTWFya2VyKHsKICAgICAgICAgICAgICBwb3NpdGlvbjogdGhpcy5wb2ludHNbaV0sCiAgICAgICAgICAgICAgbGFiZWw6IHsKICAgICAgICAgICAgICAgIGNvbnRlbnQ6ICLliJ3lp4vngrkiLAogICAgICAgICAgICAgICAgZGlyZWN0aW9uOiAiYm90dG9tIiwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICB9KTsKICAgICAgICAgICAgdGhpcy5tYXJrTGlzdC5wdXNoKG1hcmtlcik7CiAgICAgICAgICB9CiAgICAgICAgICAvLyBjb25zb2xlLmxvZygibGVuZ3RoOiIsIHRoaXMubWFya0xpc3QubGVuZ3RoKTsKICAgICAgICAgIHRoaXMubWFwLmFkZCh0aGlzLm1hcmtMaXN0KTsKICAgICAgICB9KQogICAgICAgIC5jYXRjaCgoZSkgPT4gewogICAgICAgICAgY29uc29sZS5sb2coZSk7CiAgICAgICAgfSk7CiAgICB9LAogIH0sCn07Cg=="},{"version":3,"sources":["MapContainer.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"MapContainer.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div class=\"home_div\">\n    <div class=\"btn_box1\">\n      <span\n        ><b>用户ID: {{ user_id }}</b></span\n      >\n      <span>|</span>\n      <span><b>轨迹点的标定与绘制: </b></span>\n      <el-button type=\"success\" size=\"small\" round @click=\"addMarkers('Origin')\"\n        >Origin</el-button\n      >\n      <el-button type=\"info\" size=\"small\" round @click=\"addMarkers('Expected')\"\n        >Expected</el-button\n      >\n      <el-button type=\"warning\" size=\"small\" round @click=\"addMarkers('Result')\"\n        >Result</el-button\n      >\n      <el-button type=\"danger\" size=\"small\" round @click=\"getDispatchDetail\"\n        >绘制</el-button\n      >\n      <el-button type=\"warning\" size=\"small\" round @click=\"clear\"\n        >清除</el-button\n      >\n    </div>\n    <div class=\"btn_box2\" v-if=\"animation\">\n      <!-- <h3>动画控制</h3> -->\n      <span><b>动画控制: </b></span>\n      <el-button type=\"primary\" size=\"small\" round @click=\"startAnimation()\"\n        >开始动画</el-button\n      >\n      <el-button type=\"primary\" size=\"small\" round @click=\"pauseAnimation()\"\n        >暂停动画</el-button\n      >\n      <el-button type=\"primary\" size=\"small\" round @click=\"resumeAnimation()\"\n        >继续动画</el-button\n      >\n      <el-button type=\"success\" size=\"small\" round @click=\"setcenter\"\n        >定位</el-button\n      >\n    </div>\n    <div v-else></div>\n    <div id=\"container\"></div>\n    <div id=\"panel\"></div>\n  </div>\n</template>\n\n<script>\nimport AMapLoader from \"@amap/amap-jsapi-loader\";\nexport default {\n  name: \"Mapview\",\n  data() {\n    return {\n      map: null,\n      driving: null,\n      car: null,\n      polyline: null,\n      icon: \"http://webapi.amap.com/theme/v1.3/markers/n/mark_r.png\",\n      date: \"\",\n      time_id: \"\",\n      user_id: \"0\",\n      origin: [], // 轨迹点\n      expected: [], // 轨迹点\n      result: [], // 轨迹点\n      center: [116.407387, 39.904179],  // 北京\n      // center: [112.851274, 35.497553], // 山西晋城\n      points: [[116.407387, 39.904179]], //轨迹点-重复\n      marker_points: [], //不重复的轨迹坐标点\n      content: [],\n      markList: [],\n      path: [], // 路径\n      start: null,\n      line: [],\n      animation: false,\n    };\n  },\n  created() {},\n  mounted() {\n    this.init();\n  },\n  methods: {\n    setcenter() {\n      var map = this.map;\n      // console.log(this.car);\n      console.log(this.car.getPosition());\n      map.setCenter(this.car.getPosition(), true);\n      // map.setZoomAndCenter(15, this.car.getPosition());\n      // this.car.on(\"moving\", function (e) {\n      //   map.setCenter(e.target.getPosition(), true);\n      // });\n    },\n    addinfo() {\n      // 信息窗体的内容\n      var date =\n        this.date.slice(0, 4) +\n        \"年\" +\n        this.date.slice(4, 6) +\n        \"月\" +\n        this.date.slice(6, 8) +\n        \"日\";\n      var content = [\n        \"<div><div><b>用户ID: \" + this.user_id + \"</b>\",\n        \"日期：\" + date,\n        \"时间：</div></div>\",\n      ];\n\n      // 创建 infoWindow 实例\n      var infoWindow = new AMap.InfoWindow({\n        content: content.join(\"<br>\"), //传入 dom 对象，或者 html 字符串\n      });\n      var map = this.map;\n      // 打开信息窗体\n      infoWindow.open(map, map.getCenter());\n    },\n    // 经纬度驾车路线规划：https://lbs.amap.com/demo/jsapi-v2/example/driving-route/plan-route-according-to-lnglat\n    // 路径规划：https://lbs.amap.com/api/webservice/guide/api/direction#driving\n    // 信息窗体：https://blog.csdn.net/m0_37355951/article/details/77527686\n    // 动画：https://blog.csdn.net/weixin_45559135/article/details/110001139?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-1.pc_relevant_default&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-1.pc_relevant_default&utm_relevant_index=2\n    // 一些参考：https://blog.csdn.net/qq_44861015/article/details/122726609?spm=1001.2101.3001.6650.4&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-4.pc_relevant_default&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-4.pc_relevant_default&utm_relevant_index=9\n    // https://blog.csdn.net/annaihanyou65423/article/details/101672953\n    // https://blog.csdn.net/weixin_41618917/article/details/117258242?spm=1001.2101.3001.6650.4&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-4.pc_relevant_antiscanv2&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-4.pc_relevant_antiscanv2&utm_relevant_index=5\n    // vue高德多条轨迹导航+带途径节点标注+各路线颜色区别：https://blog.csdn.net/qq_29101609/article/details/103597842?spm=1001.2101.3001.6650.2&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-2.pc_relevant_paycolumn_v3&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-2.pc_relevant_paycolumn_v3&utm_relevant_index=3\n    // vue高德单条(可批量)路线规划+单条(可批量)路线带途径节点marker+单条(可批量)路线分段渲染各颜色：https://blog.csdn.net/qq_29101609/article/details/106237837?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-0.pc_relevant_default&spm=1001.2101.3001.4242.1&utm_relevant_index=3\n\n    addCar(pos) {\n      // 根据pos添加小车\n      this.car = new AMap.Marker({\n        position: pos,\n        // icon: \"https://webapi.amap.com/images/car.png\",\n        icon: require(\"../assets/1.png\"),\n        offset: new AMap.Pixel(-12.5, -24),\n        angle: 90, //图片旋转角度\n      });\n      this.map.add(this.car);\n    },\n    clear() {\n      // 清除地图\n      this.animation = false;\n      var map = this.map;\n      map.clearMap();\n      // // 清除以前的行经路线\n      // if (this.driving) {\n      //   this.driving.clear();\n      // }\n    },\n    startAnimation() {\n      var map = this.map;\n      // map.setZoom(18)\n      console.log(\"path:\", this.path);\n      // var temp = this.path[0];\n      this.line = this.path[0];\n      for (let i = 1; i < this.path.length; i++) {\n        // temp = temp.concat(this.path[i]);\n        this.line = this.line.concat(this.path[i]);\n      }\n      //绘制经过的轨迹\n      var passedPolyline = new AMap.Polyline({\n        map: map,\n        strokeColor: \"#00FF00\", //线颜色\n        strokeOpacity: 0.9, //线透明度\n        showDir: true,\n        strokeWeight: 7, //线宽\n        lineJoin: \"round\",\n      });\n      this.car.on(\"moving\", (e) => {\n        passedPolyline.setPath(e.passedPath);\n        // map.setCenter(e.target.getPosition(), true);\n      });\n\n      console.log(\"line:\", this.line);\n      this.car.moveAlong(this.line, {\n        // 每一段的时长\n        // duration: 300, //可根据实际采集时间间隔设置\n        speed: 1000,\n        autoRotation: true,\n        // JSAPI2.0 是否延道路自动设置角度在 moveAlong 里设置\n      });\n      this.pauseAnimation();\n      this.resumeAnimation();\n      this.pauseAnimation();\n      this.resumeAnimation();\n    },\n    pauseAnimation() {\n      //暂停动画\n      this.car.pauseMove();\n    },\n    resumeAnimation() {\n      // 继续动画\n      this.car.resumeMove();\n    },\n    stopAnimation() {\n      // 停止动画\n      this.car.stopMove();\n    },\n    Color() {\n      var r = Math.floor(Math.random() * 255);\n      var g = Math.floor(Math.random() * 255);\n      var b = Math.floor(Math.random() * 255);\n      return \"rgba(\" + r + \",\" + g + \",\" + b + \",0.8)\";\n    },\n    getDispatchDetail() {\n      const lineColor = \"#0000FF\";\n      // 可以随机线的颜色\n      this.driving = new AMap.Driving({\n        // 驾车路线规划策略，AMap.DrivingPolicy.LEAST_TIME是最快捷模式,还有其他几种方式见Api文档\n        policy: AMap.DrivingPolicy.LEAST_TIME,\n      });\n      // 目前使用原结果点进行测试\n      // var data = this.expected.filter((data) => {\n      //   return data != \"\";\n      // });\n      var data = this.points;\n      // var data = this.result.filter((data) => {\n      //   return data != \"\";\n      // });\n      // 设置起点\n      this.start = data[0];\n      this.addCar(this.start);\n      var map = this.map;\n      this.path = new Array(data.length - 1);\n      // console.log(\"length:\", this.path.length);\n      for (let i = 0; i < data.length - 1; i++) {\n        // 解决this.driving.search的回调函数异步问题\n        this.drawMapLine(\n          data[i][0],\n          data[i][1],\n          data[i + 1][0],\n          data[i + 1][1],\n          map,\n          lineColor,\n          i\n        );\n      }\n      // map.setZoom(18);\n      this.animation = true;\n      map.setFitView();\n      map.setZoomAndCenter(14, this.car.getPosition());\n    },\n    // start_x:起点的横坐标,start_y：起点的纵坐标,end_x:终点的横坐标,end_y:终点的纵坐标,map:实例化map(this.map),color:随机线的颜色\n    // 绘制路径\n    drawMapLine(start_x, start_y, end_x, end_y, map, color, i) {\n      map.plugin(\"AMap.Driving\", () => {\n        var start_xy = new AMap.LngLat(start_x, start_y); //起点\n        var end_xy = new AMap.LngLat(end_x, end_y); // 终点\n        // 根据起终点经纬度规划驾车导航 路线\n        this.driving.search(start_xy, end_xy, (status, result) => {\n          // console.log(start_xy, end_xy);\n          if (status === \"complete\") {\n            if (result.routes && result.routes.length) {\n              // 绘制路线规划的第一条路线，也可以按需求绘制其它几条路线\n              var path = this.parseRouteToPath(result.routes[0]);\n              // this.driving.search的回调函数存在异步问题，用数组方式解决\n              this.path[i] = path;\n              this.routeLine = new AMap.Polyline({\n                map: map,\n                path: path,\n                showDir: true,\n                isOutline: true,\n                outlineColor: \"#ffeeee\",\n                borderWeight: 2,\n                strokeWeight: 6,\n                strokeColor: color,\n                lineJoin: \"round\",\n              });\n              // console.log(\"绘制驾车路线完成\");\n            }\n          } else {\n            console.log(\"获取驾车数据失败：\" + result);\n          }\n        });\n      });\n    },\n    // 计算各个拐点位置\n    parseRouteToPath(route) {\n      var path = [];\n      for (var i = 0, l = route.steps.length; i < l; i++) {\n        var step = route.steps[i];\n        for (var j = 0, n = step.path.length; j < n; j++) {\n          path.push(step.path[j]);\n        }\n      }\n      return path;\n    },\n    removeMarkers() {\n      // 去除现在的坐标点列表\n      // console.log(this.markList);\n      this.map.remove(this.markList);\n      this.markList = [];\n    },\n    addMarkers(type) {\n      console.log(type);\n      let type_str = \"\";\n      // 根据类型添加点\n      if (type == \"Origin\") {\n        this.removeMarkers();\n        this.points = this.origin.filter((data) => {\n          return data != \"\";\n        });\n        // console.log(\"origin:\",this.points);\n        type_str = \"输入轨迹\";\n        this.icon = require(\"../assets/black.png\");\n      } else if (type == \"Expected\") {\n        this.removeMarkers();\n        this.points = this.expected.filter((data) => {\n          return data != \"\";\n        });\n        type_str = \"原始轨迹\";\n        // console.log(\"Expected:\",this.points);\n        this.icon = require(\"../assets/blue.png\");\n      } else if (type == \"Result\") {\n        this.removeMarkers();\n        this.points = this.result.filter((data) => {\n          return data != \"\";\n        });\n        type_str = \"预测轨迹\";\n        // console.log(\"Result:\",this.points);\n        this.icon = require(\"../assets/red.png\");\n      }\n      console.log(type_str);\n      this.markList = [];\n      this.marker_points = [];\n      var content = [];\n      var content_temp = \"\";\n      for (let i = 0; i < this.points.length; i++) {\n        this.marker_points.push(this.points[i]);\n      }\n      for (let i = 0; i < this.marker_points.length; i++) {\n        // 去除重复的点\n        for (var j = i + 1; j < this.marker_points.length; j++) {\n          if (\n            this.marker_points[i][0] == this.marker_points[j][0] &&\n            this.marker_points[i][1] == this.marker_points[j][1]\n          ) {\n            this.marker_points.splice(j, 1);\n            j--;\n          }\n        }\n      }\n      for (let i = 0; i < this.marker_points.length; i++) {\n        content_temp = \"\";\n        if (i == 0) {\n          content_temp = \"起点\";\n        } else if (i == this.marker_points.length - 1) {\n          content_temp = \"终点\";\n        }\n        for (let j = 1; j < this.points.length - 1; j++) {\n          if (\n            this.marker_points[i][0] == this.points[j][0] &&\n            this.marker_points[i][1] == this.points[j][1]\n          ) {\n            if (content_temp == \"\") {\n              content_temp = \"途径点\" + j;\n            } else {\n              content_temp = content_temp + \"&途径点\" + j;\n            }\n          }\n        }\n        content.push(content_temp);\n      }\n      // console.log(\"content:\", content);\n      // console.log(\"重复:\", this.points);\n      // console.log(\"不重复：\", this.marker_points);\n      for (let i = 0; i < this.marker_points.length; i++) {\n        var marker = new AMap.Marker({\n          position: this.marker_points[i],\n          offset: new AMap.Pixel(-16, -32),\n          icon: this.icon, // 添加 Icon 实例\n          label: {\n            content: content[i],\n            direction: \"bottom\",\n          },\n        });\n        marker.content = [content[i], this.marker_points[i], type_str];\n        marker.on(\"click\", this.markerClick);\n        this.markList.push(marker);\n      }\n      console.log(\"length:\", this.markList.length);\n      this.map.add(this.markList);\n      this.map.setFitView();\n    },\n    markerClick(e) {\n      // 信息窗体的内容\n      console.log(e.target.content);\n      // console.log(e.target.content[1][0]);\n      var date =\n        this.date.slice(0, 4) +\n        \"年\" +\n        this.date.slice(4, 6) +\n        \"月\" +\n        this.date.slice(6, 8) +\n        \"日\";\n      var content;\n      content = [\n        \"<b>\" + e.target.content[0] + \"——\" + e.target.content[2] + \"</b>\",\n        \"<b>用户ID: \" + this.user_id + \"</b>\",\n        \"日期: \" + date,\n        \"经纬度: [\" +\n          e.target.content[1][0].toFixed(2) +\n          \",\" +\n          e.target.content[1][1].toFixed(2) +\n          \"]\",\n        // \"时间：\",\n      ];\n\n      // 创建 infoWindow 实例\n      var infoWindow = new AMap.InfoWindow({\n        content: content.join(\"<br>\"), //传入 dom 对象，或者 html 字符串\n      });\n      var map = this.map;\n      // 打开信息窗体\n      infoWindow.open(map, e.target.getPosition());\n    },\n    // 地图初始化\n    async init() {\n      // Load获得轨迹数据\n      let res = await this.$axios.get(\"/result.json\");\n      // // 选择的第16条数据\n      // this.date = res.data.date[15];\n      // this.time_id = res.data.time[15];\n      // this.user_id = res.data.user[15];\n      // this.origin = res.data.origin[15];\n      // this.expected = res.data.expected[15];\n      // this.result = res.data.result[15];\n\n      // 从结果中随机选择一条数据\n      var id = 0;\n      id = Math.floor(Math.random() * 50);\n      // console.log(\"id:\",id);\n      this.date = res.data.date[id];\n      this.time_id = res.data.time[id];\n      this.user_id = res.data.user[id];\n      this.origin = res.data.origin[id];\n      this.expected = res.data.expected[id];\n      this.result = res.data.result[id];\n\n      // 选择第一条数据做测试\n      // this.date = res.data.date[0];\n      // this.time_id = res.data.time[0];\n      // this.user_id = res.data.user[0];\n      // // this.origin = res.data.origin[0].slice(0, 8);\n      // // this.expected = res.data.expected[0].slice(0, 8);\n      // // this.result = res.data.result[0].slice(0, 8);\n      // this.origin = res.data.origin[0];\n      // this.expected = res.data.expected[0];\n      // this.result = res.data.result[0];\n      // console.log(this.origin, this.expected, this.result);\n\n      AMapLoader.load({\n        key: \"ddd292c88aa1bad9c04891a47724f40a\", //设置您的key\n        version: \"2.0\",\n        // version:\"1.4.4\",\n        plugins: [\n          \"AMap.ToolBar\",\n          \"AMap.Driving\",\n          \"AMap.MoveAnimation\",\n          \"AMap.Scale\",\n          \"AMap.HawkEye\",\n          \"AMap.MapType\",\n          \"AMap.ControlBar\",\n        ],\n        AMapUI: {\n          version: \"1.1\",\n          plugins: [\"overlay/SimpleMarker\"],\n        },\n        Loca: {\n          version: \"2.0\",\n          // version:\"1.4.4\",\n        },\n      })\n        .then((AMap) => {\n          this.map = new AMap.Map(\"container\", {\n            viewMode: \"3D\",\n            // zoom: 11.5,\n            zoom:15,\n            // zooms: [2, 22],\n            center: this.center,\n          });\n          this.map.addControl(new AMap.Scale());\n          this.map.addControl(new AMap.ToolBar());\n          this.map.addControl(new AMap.HawkEye());\n          this.map.addControl(new AMap.MapType());\n          this.map.addControl(new AMap.ControlBar());\n\n          // 初始化点\n          for (let i = 0; i < this.points.length; i++) {\n            var marker = new AMap.Marker({\n              position: this.points[i],\n              label: {\n                content: \"初始点\",\n                direction: \"bottom\",\n              },\n            });\n            this.markList.push(marker);\n          }\n          // console.log(\"length:\", this.markList.length);\n          this.map.add(this.markList);\n        })\n        .catch((e) => {\n          console.log(e);\n        });\n    },\n  },\n};\n</script>\n\n<style  scoped>\n.home_div {\n  padding: 0px;\n  margin: 0px;\n  width: 100%;\n  height: 80%;\n  /* position: relative; */\n}\n#container {\n  margin-top: 15px;\n  width: 80%;\n  height: 86%;\n  left: 10%;\n  /* position: absolute; */\n}\n.btn_box1 {\n  position: relative;\n  width: 60%;\n  left: 18%;\n  margin: 10px 0px 0px 0px;\n  padding: 0px 20px 10px 40px;\n  border-bottom: 1px solid #dcdcdc;\n\n  /* padding: 10px; */\n}\n.btn_box1 span,\n.btn_box2 span {\n  font-size: 22px;\n  vertical-align: top;\n  margin: 0px 20px 0px 0px;\n}\n.btn_box2 {\n  position: relative;\n  width: 45%;\n  left: 30%;\n  margin: 10px 0px 0px 10px;\n\n  /* padding: 10px; */\n}\n</style>"]}]}