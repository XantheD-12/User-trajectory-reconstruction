{"remainingRequest":"E:\\vue\\user-trajectory-reconstruction\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\vue\\user-trajectory-reconstruction\\src\\views\\MapContainer.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\vue\\user-trajectory-reconstruction\\src\\views\\MapContainer.vue","mtime":1652882076636},{"path":"E:\\vue\\user-trajectory-reconstruction\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\vue\\user-trajectory-reconstruction\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"E:\\vue\\user-trajectory-reconstruction\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\vue\\user-trajectory-reconstruction\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["MapContainer.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyfile":"MapContainer.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div class=\"home_div\">\n    <div class=\"btn_box\">\n      <el-button type=\"primary\" size=\"small\" round @click=\"removeMarkers\"\n        >Remove</el-button\n      >\n      <el-button type=\"success\" size=\"small\" round @click=\"addMarkers('Origin')\"\n        >Origin</el-button\n      >\n      <el-button type=\"info\" size=\"small\" round @click=\"addMarkers('Expected')\"\n        >Expected</el-button\n      >\n      <el-button type=\"warning\" size=\"small\" round @click=\"addMarkers('Result')\"\n        >Result</el-button\n      >\n      <el-button type=\"danger\" size=\"small\" round @click=\"getDispatchDetail\"\n        >绘制</el-button\n      >\n      <el-button type=\"warning\" size=\"small\" round @click=\"clear\"\n        >清除</el-button\n      >\n    </div>\n    <div>\n      <p>动画控制</p>\n      <el-button type=\"primary\" @click=\"addCar\">添加小车</el-button>\n      <el-button type=\"primary\" size=\"small\" round @click=\"startAnimation()\"\n        >开始动画</el-button\n      >\n      <el-button type=\"primary\" size=\"small\" round @click=\"pauseAnimation()\"\n        >暂停动画</el-button\n      >\n      <el-button type=\"primary\" size=\"small\" round @click=\"resumeAnimation()\"\n        >继续动画</el-button\n      >\n    </div>\n    <div id=\"container\"></div>\n    <div id=\"panel\"></div>\n  </div>\n</template>\n\n<script>\nimport AMapLoader from \"@amap/amap-jsapi-loader\";\nexport default {\n  name: \"Mapview\",\n  data() {\n    return {\n      map: null,\n      driving: null,\n      car: null,\n      polyline: null,\n      icon: \"http://webapi.amap.com/theme/v1.3/markers/n/mark_r.png\",\n      date: \"\",\n      time_id: \"\",\n      user_id: [],\n      origin: [],\n      expected: [],\n      result: [],\n      center: [116.407387, 39.904179],\n      points: [[116.407387, 39.904179]],\n      markList: [],\n      path: [], // 路径\n      start: null,\n    };\n  },\n  created() {},\n  mounted() {\n    this.init();\n  },\n  methods: {\n    // 经纬度驾车路线规划：https://lbs.amap.com/demo/jsapi-v2/example/driving-route/plan-route-according-to-lnglat\n    // 路径规划：https://lbs.amap.com/api/webservice/guide/api/direction#driving\n    // 信息窗体：https://blog.csdn.net/m0_37355951/article/details/77527686\n    // 动画：https://blog.csdn.net/weixin_45559135/article/details/110001139?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-1.pc_relevant_default&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-1.pc_relevant_default&utm_relevant_index=2\n    // 一些参考：https://blog.csdn.net/qq_44861015/article/details/122726609?spm=1001.2101.3001.6650.4&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-4.pc_relevant_default&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-4.pc_relevant_default&utm_relevant_index=9\n    // https://blog.csdn.net/annaihanyou65423/article/details/101672953\n    // https://blog.csdn.net/weixin_41618917/article/details/117258242?spm=1001.2101.3001.6650.4&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-4.pc_relevant_antiscanv2&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-4.pc_relevant_antiscanv2&utm_relevant_index=5\n    // vue高德多条轨迹导航+带途径节点标注+各路线颜色区别：https://blog.csdn.net/qq_29101609/article/details/103597842?spm=1001.2101.3001.6650.2&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-2.pc_relevant_paycolumn_v3&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-2.pc_relevant_paycolumn_v3&utm_relevant_index=3\n    // vue高德单条(可批量)路线规划+单条(可批量)路线带途径节点marker+单条(可批量)路线分段渲染各颜色：https://blog.csdn.net/qq_29101609/article/details/106237837?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-0.pc_relevant_default&spm=1001.2101.3001.4242.1&utm_relevant_index=3\n\n    addCar(pos) {\n      // 根据pos添加小车\n      this.car = new AMap.Marker({\n        position: pos,\n        // icon: \"https://webapi.amap.com/images/car.png\",\n        icon: require(\"../assets/1.png\"),\n        offset: new AMap.Pixel(-12.5, -24),\n        angle: 90, //图片旋转角度\n      });\n      this.map.add(this.car);\n    },\n    clear() {\n      // 清除地图\n      var map = this.map;\n      map.clearMap();\n      // // 清除以前的行经路线\n      // if (this.driving) {\n      //   this.driving.clear();\n      // }\n    },\n    startAnimation() {\n      var map = this.map;\n      // map.setZoom(18)\n      console.log(\"path:\", this.path);\n      var temp = this.path[0];\n      for (let i = 1; i < this.path.length; i++) {\n        temp = temp.concat(this.path[i]);\n      }\n\n      //绘制经过的轨迹\n      var passedPolyline = new AMap.Polyline({\n        map: map,\n        strokeColor: \"#CD5C5C\", //线颜色\n        //path: this.lineArr,\n        // strokeOpacity: 1,     //线透明度\n        showDir: true,\n        strokeWeight: 6, //线宽\n        // strokeStyle: \"solid\"  //线样式\n      });\n      this.car.on(\"moving\", (e) => {\n        //获取已经经过点的长度\n        this.passedLineLength = e.passedPath.length;\n        //已经经过的点\n        this.havePassedLine = e.passedPath;\n        passedPolyline.setPath(e.passedPath);\n        map.setCenter(e.target.getPosition(), true);\n      });\n\n      console.log(\"temp:\", temp);\n      this.car.moveAlong(temp, {\n        // 每一段的时长\n        // duration: 300, //可根据实际采集时间间隔设置\n        speed: 400,\n        autoRotation: true,\n        // JSAPI2.0 是否延道路自动设置角度在 moveAlong 里设置\n        // autoRotation: true,\n      });\n    },\n    pauseAnimation() {\n      this.car.pauseMove(); //暂停动画\n    },\n    resumeAnimation() {\n      // 继续动画\n      this.car.resumeMove();\n    },\n    Color() {\n      var r = Math.floor(Math.random() * 255);\n      var g = Math.floor(Math.random() * 255);\n      var b = Math.floor(Math.random() * 255);\n      return \"rgba(\" + r + \",\" + g + \",\" + b + \",0.8)\";\n    },\n    async getDispatchDetail() {\n      // var lineColor = \"rgba(0,0,205,0.8)\";\n      var lineColor = [\n        \"rgba(0,255,0,0.8)\",\n        \"rgba(100,149,237,0.8)\",\n        \"rgba(255,193,37,0.8)\",\n      ];\n      // 可以随机线的颜色\n      this.driving = new AMap.Driving({\n        // 驾车路线规划策略，AMap.DrivingPolicy.LEAST_TIME是最快捷模式,还有其他几种方式见Api文档\n        policy: AMap.DrivingPolicy.LEAST_TIME,\n      });\n      // 用原结果点进行测试\n      var data = this.expected.filter((data) => {\n        return data != \"\";\n      });\n      // var data = this.result.filter((data) => {\n      //   return data != \"\";\n      // });\n      // console.log(\"data:\", data);\n      // 设置起点\n      this.start = data[0];\n      this.addCar(this.start);\n      var map = this.map;\n      this.path = new Array(data.length - 1);\n      // console.log(\"length:\", this.path.length);\n      for (let i = 0; i < data.length - 1; i++) {\n        // console.log(\n        //   i,\n        //   \"start:\",\n        //   data[i][0].toFixed(6),\n        //   data[i][1].toFixed(6),\n        //   \"end:\",\n        //   data[i + 1][0].toFixed(6),\n        //   data[i + 1][1].toFixed(6)\n        // );\n        // ？？？解决this.driving.search的回调函数异步问题\n        // lineColor=this.Color()\n        // console.log(lineColor);\n        this.drawMapLine(\n          data[i][0],\n          data[i][1],\n          data[i + 1][0],\n          data[i + 1][1],\n          map,\n          lineColor[i],\n          i\n        );\n      }\n      map.setZoom(18);\n      map.setFitView();\n    },\n    // start_x:起点的横坐标,start_y：起点的纵坐标,end_x:终点的横坐标,end_y:终点的纵坐标,map:实例化map(this.map),color:随机线的颜色\n    // 绘制路径\n    drawMapLine(start_x, start_y, end_x, end_y, map, color, i) {\n      // console.log(\"第\",i);\n      map.plugin(\"AMap.Driving\", () => {\n        var start_xy = new AMap.LngLat(start_x, start_y); //起点\n        var end_xy = new AMap.LngLat(end_x, end_y); // 终点\n        // 根据起终点经纬度规划驾车导航 路线\n        this.driving.search(start_xy, end_xy, (status, result) => {\n          console.log(start_xy, end_xy);\n          if (status === \"complete\") {\n            if (result.routes && result.routes.length) {\n              // 绘制路线规划的第一条路线，也可以按需求绘制其它几条路线\n              var path = this.parseRouteToPath(result.routes[0]);\n              // this.driving.search的回调函数存在异步问题，用数组方式解决\n              this.path[i] = path;\n              this.routeLine = new AMap.Polyline({\n                map: map,\n                path: path,\n                showDir: true,\n                isOutline: true,\n                outlineColor: \"#ffeeee\",\n                borderWeight: 2,\n                strokeWeight: 6,\n                strokeColor: color,\n                lineJoin: \"round\",\n              });\n              // var passedPolyline = new AMap.Polyline({\n              //   map: map,\n              //   strokeColor: \"#AF5\", //线颜色-绿色\n              //   //path: this.lineArr,\n              //   // strokeOpacity: 1,     //线透明度\n              //   strokeWeight: 6, //线宽\n              //   // strokeStyle: \"solid\"  //线样式\n              // });\n\n              // console.log(start_x, start_y);\n              // console.log(passedPolyline);\n              // if (start_xy == this.start) {\n              //   this.car.on(\"moving\", (e) => {\n              //     passedPolyline.setPath(e.passedPath);\n              //     map.setCenter(e.target.getPosition(), true); // 设置视图为小车中心\n              //   });\n              // }\n\n              // console.log(routeLine);\n              // routeLine.setMap(map);\n              //绘制经过的轨迹\n              // var passedPolyline = new AMap.Polyline({\n              //   map: map,\n              //   strokeColor: \"#AF5\", //线颜色\n              //   //path: this.lineArr,\n              //   // strokeOpacity: 1,     //线透明度\n              //   strokeWeight: 6, //线宽\n              //   // strokeStyle: \"solid\"  //线样式\n              // });\n              // this.marker.on(\"moving\", (e) => {\n              //   //获取已经经过点的长度\n              //   this.passedLineLength = e.passedPath.length;\n              //   //已经经过的点\n              //   this.havePassedLine = e.passedPath;\n              //   passedPolyline.setPath(e.passedPath);\n              // });\n              // this.map.setFitView(); //合适的视口\n              // map.setFitView(); // 调整视野达到最佳显示区域\n              // map.setFitView([startMarker, endMarker, routeLine])\n              // console.log(\"绘制驾车路线完成\");\n            }\n          } else {\n            console.log(\"获取驾车数据失败：\" + result);\n          }\n        });\n      });\n    },\n    // 计算各个拐点位置\n    parseRouteToPath(route) {\n      var path = [];\n      for (var i = 0, l = route.steps.length; i < l; i++) {\n        var step = route.steps[i];\n        for (var j = 0, n = step.path.length; j < n; j++) {\n          path.push(step.path[j]);\n        }\n      }\n      return path;\n    },\n    removeMarkers() {\n      // 去除现在的坐标点列表\n      console.log(this.markList);\n      this.map.remove(this.markList);\n      this.markList = [];\n    },\n    addMarkers(type) {\n      console.log(type);\n      // 根据类型添加点\n      if (type == \"Origin\") {\n        this.removeMarkers();\n        this.points = this.origin.filter((data) => {\n          return data != \"\";\n        });\n        // console.log(\"origin:\",this.points);\n        this.icon = require(\"../assets/black.png\");\n      } else if (type == \"Expected\") {\n        this.points = this.expected.filter((data) => {\n          return data != \"\";\n        });\n        // console.log(\"Expected:\",this.points);\n        this.icon = require(\"../assets/blue.png\");\n      } else if (type == \"Result\") {\n        this.points = this.result.filter((data) => {\n          return data != \"\";\n        });\n        // console.log(\"Result:\",this.points);\n        this.icon = require(\"../assets/red.png\");\n      }\n      this.markList = [];\n      for (let i = 0; i < this.points.length; i++) {\n        var marker = new AMap.Marker({\n          position: this.points[i],\n          offset: new AMap.Pixel(-16, -32),\n          icon: this.icon, // 添加 Icon 实例\n          label: {\n            content: i + \"position\",\n            direction: \"bottom\",\n          },\n        });\n        this.markList.push(marker);\n      }\n      console.log(\"length:\", this.markList.length);\n      this.map.add(this.markList);\n    },\n    // 地图初始化\n    async init() {\n      // Load获得轨迹数据\n      let res = await this.$axios.get(\"/result.json\");\n      // // 选择的第16条数据\n      // this.date = res.data.date[15];\n      // this.time_id = res.data.time[15];\n      // this.user_id = res.data.user[15];\n      // this.origin = res.data.origin[15];\n      // this.expected = res.data.expected[15];\n      // this.result = res.data.result[15];\n      // 选择第一条数据做测试\n      this.date = res.data.date[0];\n      this.time_id = res.data.time[0];\n      this.user_id = res.data.user[0];\n      this.origin = res.data.origin[0].slice(0, 8);\n      this.expected = res.data.expected[0].slice(0, 8);\n      this.result = res.data.result[0].slice(0, 8);\n      console.log(this.origin, this.expected, this.result);\n      AMapLoader.load({\n        key: \"ddd292c88aa1bad9c04891a47724f40a\", //设置您的key\n        version: \"2.0\",\n        // version:\"1.4.4\",\n        plugins: [\"AMap.ToolBar\", \"AMap.Driving\", \"AMap.MoveAnimation\"],\n        AMapUI: {\n          version: \"1.1\",\n          plugins: [\"overlay/SimpleMarker\"],\n        },\n        Loca: {\n          version: \"2.0\",\n          // version:\"1.4.4\",\n        },\n      })\n        .then((AMap) => {\n          this.map = new AMap.Map(\"container\", {\n            viewMode: \"3D\",\n            zoom: 11.5,\n            // zooms: [2, 22],\n            center: this.center,\n          });\n          // 初始化点\n          for (let i = 0; i < this.points.length; i++) {\n            var marker = new AMap.Marker({\n              position: this.points[i],\n              label: {\n                content: \"初始点\",\n                direction: \"bottom\",\n              },\n            });\n            this.markList.push(marker);\n          }\n          console.log(\"length:\", this.markList.length);\n          this.map.add(this.markList);\n        })\n        .catch((e) => {\n          console.log(e);\n        });\n    },\n  },\n};\n</script>\n\n<style  scoped>\n.home_div {\n  padding: 0px;\n  margin: 0px;\n  width: 100%;\n  height: 100%;\n  /* position: relative; */\n}\n#container {\n  margin: 10px;\n  width: 100% - 20px;\n  height: 100%;\n  /* position: absolute; */\n}\n.btn_box {\n  margin: 10px;\n  padding: 10px;\n}\n</style>"]}]}